package org.it.uniba.minima.GUI;

import org.it.uniba.minima.Control.UserInputFlow;
import org.it.uniba.minima.Database.DatabaseConnection;
import org.it.uniba.minima.Entity.Game;

import javax.swing.*;
import javax.swing.plaf.metal.MetalButtonUI;
import java.awt.*;
import java.awt.event.ActionEvent;

/**
 * The type Mattonelle gui.
 *
 * @author miche
 */
public class TilesGUI extends javax.swing.JPanel {

    /**
     * Creates new form TilesGUI
     */
    public TilesGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        ImageIcon img = new ImageIcon("docs/img/stoneBackground.png");
        Image image = img.getImage();
        g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
    }

    private void initComponents() {
        A1 = new javax.swing.JButton();
        A2 = new javax.swing.JButton();
        A3 = new javax.swing.JButton();

        B1 = new javax.swing.JButton();
        B2 = new javax.swing.JButton();
        B3 = new javax.swing.JButton();

        C1 = new javax.swing.JButton();
        C2 = new javax.swing.JButton();
        C3 = new javax.swing.JButton();

        D1 = new javax.swing.JButton();
        D2 = new javax.swing.JButton();
        D3 = new javax.swing.JButton();

        E1 = new javax.swing.JButton();
        E2 = new javax.swing.JButton();
        E3 = new javax.swing.JButton();

        F1 = new javax.swing.JButton();
        F2 = new javax.swing.JButton();
        F3 = new javax.swing.JButton();

        G1 = new javax.swing.JButton();
        G2 = new javax.swing.JButton();
        G3 = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(440, 400));
        setMinimumSize(new java.awt.Dimension(440, 400));
        setPreferredSize(new java.awt.Dimension(440, 400));

        C1.setEnabled(false);
        C1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        C1.setFocusPainted(false);
        C1.setBackground(new Color(201, 164, 71));
        C1.setForeground(new java.awt.Color(255, 255, 255));
        C1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        C1.setMaximumSize(new java.awt.Dimension(100, 50));
        C1.setMinimumSize(new java.awt.Dimension(100, 50));
        C1.setPreferredSize(new java.awt.Dimension(100, 50));
        C1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C1ActionPerformed(evt);
            }
        });

        B1.setEnabled(false);
        B1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        B1.setFocusPainted(false);
        B1.setBackground(new Color(201, 164, 71));
        B1.setForeground(new java.awt.Color(255, 255, 255));
        B1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        B1.setMaximumSize(new java.awt.Dimension(100, 50));
        B1.setMinimumSize(new java.awt.Dimension(100, 50));
        B1.setPreferredSize(new java.awt.Dimension(100, 50));
        B1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B1ActionPerformed(evt);
            }
        });


        B3.setEnabled(false);
        B3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        B3.setFocusPainted(false);
        B3.setBackground(new Color(201, 164, 71));
        B3.setForeground(new java.awt.Color(255, 255, 255));
        B3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        B3.setMaximumSize(new java.awt.Dimension(100, 50));
        B3.setMinimumSize(new java.awt.Dimension(100, 50));
        B3.setPreferredSize(new java.awt.Dimension(100, 50));
        B3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B3ActionPerformed(evt);
            }
        });


        B2.setEnabled(false);
        B2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        B2.setFocusPainted(false);
        B2.setBackground(new Color(201, 164, 71));
        B2.setForeground(new java.awt.Color(255, 255, 255));
        B2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        B2.setMaximumSize(new java.awt.Dimension(100, 50));
        B2.setMinimumSize(new java.awt.Dimension(100, 50));
        B2.setPreferredSize(new java.awt.Dimension(100, 50));
        B2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B2ActionPerformed(evt);
            }
        });


        C3.setEnabled(false);
        C3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        C3.setFocusPainted(false);
        C3.setBackground(new Color(201, 164, 71));
        C3.setForeground(new java.awt.Color(255, 255, 255));
        C3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        C3.setMaximumSize(new java.awt.Dimension(100, 50));
        C3.setMinimumSize(new java.awt.Dimension(100, 50));
        C3.setPreferredSize(new java.awt.Dimension(100, 50));
        C3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C3ActionPerformed(evt);
            }
        });


        D1.setEnabled(false);
        D1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        D1.setFocusPainted(false);
        D1.setBackground(new Color(201, 164, 71));
        D1.setForeground(new java.awt.Color(255, 255, 255));
        D1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        D1.setMaximumSize(new java.awt.Dimension(100, 50));
        D1.setMinimumSize(new java.awt.Dimension(100, 50));
        D1.setPreferredSize(new java.awt.Dimension(100, 50));
        D1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D1ActionPerformed(evt);
            }
        });


        D2.setEnabled(false);
        D2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        D2.setFocusPainted(false);
        D2.setBackground(new Color(201, 164, 71));
        D2.setForeground(new java.awt.Color(255, 255, 255));
        D2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        D2.setMaximumSize(new java.awt.Dimension(100, 50));
        D2.setMinimumSize(new java.awt.Dimension(100, 50));
        D2.setPreferredSize(new java.awt.Dimension(100, 50));
        D2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D2ActionPerformed(evt);
            }
        });


        D3.setEnabled(false);
        D3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        D3.setFocusPainted(false);
        D3.setBackground(new Color(201, 164, 71));
        D3.setForeground(new java.awt.Color(255, 255, 255));
        D3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        D3.setMaximumSize(new java.awt.Dimension(100, 50));
        D3.setMinimumSize(new java.awt.Dimension(100, 50));
        D3.setPreferredSize(new java.awt.Dimension(100, 50));
        D3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D3ActionPerformed(evt);
            }
        });


        C2.setEnabled(false);
        C2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        C2.setFocusPainted(false);
        C2.setBackground(new Color(201, 164, 71));
        C2.setForeground(new java.awt.Color(255, 255, 255));
        C2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        C2.setMaximumSize(new java.awt.Dimension(100, 50));
        C2.setMinimumSize(new java.awt.Dimension(100, 50));
        C2.setPreferredSize(new java.awt.Dimension(100, 50));
        C2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C2ActionPerformed(evt);
            }
        });


        G1.setEnabled(false);
        G1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        G1.setFocusPainted(false);
        G1.setBackground(new Color(201, 164, 71));
        G1.setForeground(new java.awt.Color(255, 255, 255));
        G1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        G1.setMaximumSize(new java.awt.Dimension(100, 50));
        G1.setMinimumSize(new java.awt.Dimension(100, 50));
        G1.setPreferredSize(new java.awt.Dimension(100, 50));
        G1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G1ActionPerformed(evt);
            }
        });


        G2.setEnabled(false);
        G2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        G2.setFocusPainted(false);
        G2.setBackground(new Color(201, 164, 71));
        G2.setForeground(new java.awt.Color(255, 255, 255));
        G2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        G2.setMaximumSize(new java.awt.Dimension(100, 50));
        G2.setMinimumSize(new java.awt.Dimension(100, 50));
        G2.setPreferredSize(new java.awt.Dimension(100, 50));
        G2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G2ActionPerformed(evt);
            }
        });


        G3.setEnabled(false);
        G3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        G3.setFocusPainted(false);
        G3.setBackground(new Color(201, 164, 71));
        G3.setForeground(new java.awt.Color(255, 255, 255));
        G3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        G3.setMaximumSize(new java.awt.Dimension(100, 50));
        G3.setMinimumSize(new java.awt.Dimension(100, 50));
        G3.setPreferredSize(new java.awt.Dimension(100, 50));
        G3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                G3ActionPerformed(evt);
            }
        });


        F2.setEnabled(false);
        F2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        F2.setFocusPainted(false);
        F2.setBackground(new Color(201, 164, 71));
        F2.setForeground(new java.awt.Color(255, 255, 255));
        F2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        F2.setMaximumSize(new java.awt.Dimension(100, 50));
        F2.setMinimumSize(new java.awt.Dimension(100, 50));
        F2.setPreferredSize(new java.awt.Dimension(100, 50));
        F2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F2ActionPerformed(evt);
            }
        });


        F1.setEnabled(false);
        F1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        F1.setFocusPainted(false);
        F1.setBackground(new Color(201, 164, 71));
        F1.setForeground(new java.awt.Color(255, 255, 255));
        F1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        F1.setMaximumSize(new java.awt.Dimension(100, 50));
        F1.setMinimumSize(new java.awt.Dimension(100, 50));
        F1.setPreferredSize(new java.awt.Dimension(100, 50));
        F1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F1ActionPerformed(evt);
            }
        });


        E1.setEnabled(false);
        E1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        E1.setFocusPainted(false);
        E1.setBackground(new Color(201, 164, 71));
        E1.setForeground(new java.awt.Color(255, 255, 255));
        E1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        E1.setMaximumSize(new java.awt.Dimension(100, 50));
        E1.setMinimumSize(new java.awt.Dimension(100, 50));
        E1.setPreferredSize(new java.awt.Dimension(100, 50));
        E1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E1ActionPerformed(evt);
            }
        });


        E3.setEnabled(false);
        E3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        E3.setFocusPainted(false);
        E3.setBackground(new Color(201, 164, 71));
        E3.setForeground(new java.awt.Color(255, 255, 255));
        E3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        E3.setMaximumSize(new java.awt.Dimension(100, 50));
        E3.setMinimumSize(new java.awt.Dimension(100, 50));
        E3.setPreferredSize(new java.awt.Dimension(100, 50));
        E3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E3ActionPerformed(evt);
            }
        });


        E2.setEnabled(false);
        E2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        E2.setFocusPainted(false);
        E2.setBackground(new Color(201, 164, 71));
        E2.setForeground(new java.awt.Color(255, 255, 255));
        E2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        E2.setMaximumSize(new java.awt.Dimension(100, 50));
        E2.setMinimumSize(new java.awt.Dimension(100, 50));
        E2.setPreferredSize(new java.awt.Dimension(100, 50));
        E2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                E2ActionPerformed(evt);
            }
        });


        F3.setEnabled(false);
        F3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        F3.setFocusPainted(false);
        F3.setBackground(new Color(201, 164, 71));
        F3.setForeground(new java.awt.Color(255, 255, 255));
        F3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        F3.setMaximumSize(new java.awt.Dimension(100, 50));
        F3.setMinimumSize(new java.awt.Dimension(100, 50));
        F3.setPreferredSize(new java.awt.Dimension(100, 50));
        F3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                F3ActionPerformed(evt);
            }
        });



        A1.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        A1.setFocusPainted(false);
        A1.setBackground(new Color(201, 164, 71));
        A1.setForeground(new java.awt.Color(255, 255, 255));
        A1.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        A1.setMaximumSize(new java.awt.Dimension(100, 50));
        A1.setMinimumSize(new java.awt.Dimension(100, 50));
        A1.setPreferredSize(new java.awt.Dimension(100, 50));
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A1ActionPerformed(evt);
            }
        });


        A3.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        A3.setFocusPainted(false);
        A3.setBackground(new Color(201, 164, 71));
        A3.setForeground(new java.awt.Color(255, 255, 255));
        A3.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        A3.setMaximumSize(new java.awt.Dimension(100, 50));
        A3.setMinimumSize(new java.awt.Dimension(100, 50));
        A3.setPreferredSize(new java.awt.Dimension(100, 50));
        A3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A3ActionPerformed(evt);
            }
        });


        A2.setUI(new MetalButtonUI() {
            @Override
            protected Color getSelectColor() {
                return new Color(133, 106, 5, 50);
            }

            @Override
            public void paint(Graphics g, JComponent c) {
                AbstractButton b = (AbstractButton) c;
                if (!b.isEnabled()) {
                    g.setColor(new Color(119, 95, 43)); // Change this to the color you want when the button is disabled
                    g.fillRect(0, 0, c.getWidth(), c.getHeight());
                } else {
                    super.paint(g, c);
                }
            }
        });
        A2.setFocusPainted(false);
        A2.setBackground(new Color(201, 164, 71));
        A2.setForeground(new java.awt.Color(255, 255, 255));
        A2.setBorder(BorderFactory.createLineBorder(new Color(119, 95, 43), 3));
        A2.setMaximumSize(new java.awt.Dimension(100, 50));
        A2.setMinimumSize(new java.awt.Dimension(100, 50));
        A2.setPreferredSize(new java.awt.Dimension(100, 50));
        A2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(G1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(G2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(G3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(F1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(F2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(F3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(E2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(E3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(D1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(D2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(D3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(C2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(C3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8))
        );
    }// </editor-fold>


    private void A1ActionPerformed(ActionEvent evt) {
        resetAllMattonelle();
    }

    private void A2ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('A');
    }

    private void A3ActionPerformed(java.awt.event.ActionEvent evt) {
        resetAllMattonelle();
    }

    private void B1ActionPerformed(ActionEvent evt) {
        makeVisible('B');
    }

    private void B2ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('B');
    }

    private void B3ActionPerformed(ActionEvent evt) {
        resetAllMattonelle();
    }

    private void C1ActionPerformed(java.awt.event.ActionEvent evt) {
        resetAllMattonelle();
    }

    private void C2ActionPerformed(java.awt.event.ActionEvent evt) {
        resetAllMattonelle();

    }

    private void C3ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('C');
    }

    private void D1ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('D');
    }

    private void D2ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('D');
    }

    private void D3ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('D');
    }

    private void E1ActionPerformed(ActionEvent evt) {
        makeVisible('E');
    }

    private void E2ActionPerformed(ActionEvent evt) {
        makeVisible('E');
    }

    private void E3ActionPerformed(ActionEvent evt) {
        makeVisible('E');
    }

    private void F1ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('F');
    }

    private void F2ActionPerformed(java.awt.event.ActionEvent evt) {
        resetAllMattonelle();
    }

    private void F3ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('F');
    }

    private void G1ActionPerformed(java.awt.event.ActionEvent evt) {
        resetAllMattonelle();
    }

    private void G2ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('G');
        DatabaseConnection.printFromDB("0", "Stanza7", "Corretto", "0", "Mattonella", "0");
        UserInputFlow.Event = 0;
        Game game = Game.getInstance();
        game.setRoomState("Stanza7", "Corretto");
        GameGUI.setImagePanel(game.getCurrentRoom().getName());
    }

    private void G3ActionPerformed(java.awt.event.ActionEvent evt) {
        makeVisible('G');
    }

    private void makeVisible(Character chara) {
        switch(chara) {
            case 'A':
                A1.setText("⬆");
                B1.setEnabled(true);
                A2.setText("⬉");
                B2.setEnabled(true);
                A3.setText("⬅");
                B3.setEnabled(true);
                break;
            case 'B':
                B1.setText("⮕");
                C1.setEnabled(true);
                B2.setText("⬈");
                C2.setEnabled(true);
                B3.setText("⬆");
                C3.setEnabled(true);
                break;
            case 'C':
                C1.setText("⬆");
                D1.setEnabled(true);
                C2.setText("⬈");
                D2.setEnabled(true);
                C3.setText("⬆");
                D3.setEnabled(true);
                break;
            case 'D':
                D1.setText("⬆");
                E1.setEnabled(true);
                D2.setText("⬅");
                E2.setEnabled(true);
                D3.setText("⬅");
                E3.setEnabled(true);
                break;
            case 'E':
                E1.setText("⬆");
                F1.setEnabled(true);
                E2.setText("⮕");
                F2.setEnabled(true);
                E3.setText("⬆");
                F3.setEnabled(true);
                break;
            case 'F':
                F1.setText("⬊");
                G1.setEnabled(true);
                F2.setText("⬆");
                G2.setEnabled(true);
                F3.setText("⬆");
                G3.setEnabled(true);
                break;
            case 'G':
                G1.setText("⮕");
                G2.setText("⬆");
                G3.setText("⬅");
                break;
        }
    }

    /**
     * Reset all mattonelle.
     */
    public void resetAllMattonelle() {
        UserInputFlow.Event = 0;
        Game game = Game.getInstance();
        game.setRoomState("Stanza7", "Sbagliato");
        GameGUI.setImagePanel(game.getCurrentRoom().getName());
        DatabaseConnection.printFromDB("0", "Stanza7", "Sbagliato", "0", "Mattonella", "0");
        A1.setText("");
        A2.setText("");
        A3.setText("");
        B1.setText("");
        B1.setEnabled(false);
        B2.setText("");
        B2.setEnabled(false);
        B3.setText("");
        B3.setEnabled(false);
        C1.setText("");
        C1.setEnabled(false);
        C2.setText("");
        C2.setEnabled(false);
        C3.setText("");
        C3.setEnabled(false);
        D1.setText("");
        D1.setEnabled(false);
        D2.setText("");
        D2.setEnabled(false);
        D3.setText("");
        D3.setEnabled(false);
        E1.setText("");
        E1.setEnabled(false);
        E2.setText("");
        E2.setEnabled(false);
        E3.setText("");
        E3.setEnabled(false);
        F1.setText("");
        F1.setEnabled(false);
        F2.setText("");
        F2.setEnabled(false);
        F3.setText("");
        F3.setEnabled(false);
        G1.setText("");
        G1.setEnabled(false);
        G2.setText("");
        G2.setEnabled(false);
        G3.setText("");
        G3.setEnabled(false);
    }

    // Variables declaration - do not modify
    private javax.swing.JButton C1;
    private javax.swing.JButton G1;
    private javax.swing.JButton G2;
    private javax.swing.JButton G3;
    private javax.swing.JButton F2;
    private javax.swing.JButton F1;
    private javax.swing.JButton E1;
    private javax.swing.JButton E3;
    private javax.swing.JButton E2;
    private javax.swing.JButton F3;
    private javax.swing.JButton A1;
    private javax.swing.JButton B1;
    private javax.swing.JButton A3;
    private javax.swing.JButton A2;
    private javax.swing.JButton B3;
    private javax.swing.JButton B2;
    private javax.swing.JButton C3;
    private javax.swing.JButton D1;
    private javax.swing.JButton D2;
    private javax.swing.JButton D3;
    private javax.swing.JButton C2;
    // End of variables declaration
}

